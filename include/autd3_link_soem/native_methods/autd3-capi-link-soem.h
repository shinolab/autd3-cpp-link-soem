#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

struct EthernetAdaptersPtr {
  const void *_0;
};

struct ThreadPriorityPtr {
  const void *_0;
};

struct SOEMOption {
  const char *ifname;
  uint32_t buf_size;
  Duration send_cycle;
  Duration sync0_cycle;
  SyncMode sync_mode;
  ProcessPriority process_priority;
  ThreadPriorityPtr thread_priority;
  Duration state_check_interval;
  TimerStrategy timer_strategy;
  Duration sync_tolerance;
  Duration sync_timeout;
};

extern "C" {

[[nodiscard]] EthernetAdaptersPtr AUTDAdapterPointer();

[[nodiscard]] uint32_t AUTDAdapterGetSize(EthernetAdaptersPtr adapters);

void AUTDAdapterGetAdapter(EthernetAdaptersPtr adapters, uint32_t idx, char *desc, char *name);

void AUTDAdapterPointerDelete(EthernetAdaptersPtr adapters);

void AUTDLinkSOEMTracingInit();

ResultStatus AUTDLinkSOEMTracingInitWithFile(const char *path);

[[nodiscard]]
ResultLink AUTDLinkSOEM(const void *err_handler, const void *err_context, SOEMOption option);

[[nodiscard]] bool AUTDLinkSOEMIsDefault(SOEMOption option);

[[nodiscard]] uint32_t AUTDLinkSOEMStatusGetMsg(Status src, char *dst);

[[nodiscard]] ResultLink AUTDLinkRemoteSOEM(const char *addr);

[[nodiscard]] ThreadPriorityPtr AUTDLinkSOEMThreadPriorityMin();

[[nodiscard]] ThreadPriorityPtr AUTDLinkSOEMThreadPriorityCrossplatform(uint8_t value);

[[nodiscard]] ThreadPriorityPtr AUTDLinkSOEMThreadPriorityMax();

}  // extern "C"

}  // namespace autd3::native_methods
